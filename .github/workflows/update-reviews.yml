name: Update Reviews from Issues

on:
  issues:
    types: [opened, edited]

jobs:
  update-reviews:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'review')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Update reviews.json
        run: |
          # Read current reviews.json
          if [ -f "reviews.json" ]; then
            # Create backup
            cp reviews.json reviews_backup.json
            
            # Read the issue body and extract review data
            ISSUE_BODY="${{ github.event.issue.body }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
            ISSUE_CREATED="${{ github.event.issue.created_at }}"
            
            # Extract rating from issue body (assuming format: Rating: 5)
            RATING=$(echo "$ISSUE_BODY" | grep -o 'Rating: [0-9]' | cut -d' ' -f2)
            if [ -z "$RATING" ]; then
              RATING=5
            fi
            
            # Extract review text (everything after "Review:")
            REVIEW_TEXT=$(echo "$ISSUE_BODY" | sed -n '/Review:/,$p' | sed '1d')
            if [ -z "$REVIEW_TEXT" ]; then
              REVIEW_TEXT="$ISSUE_BODY"
            fi
            
            # Create new review object
            NEW_REVIEW=$(cat <<EOF
    {
      "id": $(($(jq '.reviews | length' reviews.json) + 1)),
      "name": "$ISSUE_AUTHOR",
      "position": "Guest",
      "avatar": "$(echo $ISSUE_AUTHOR | cut -c1-2 | tr '[:lower:]' '[:upper:]')",
      "rating": $RATING,
      "text": "$(echo "$REVIEW_TEXT" | sed 's/"/\\"/g' | tr '\n' ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')",
      "date": "$(date -d "$ISSUE_CREATED" '+%B %Y')"
    }
EOF
)
            
            # Add new review to the beginning of the array
            jq --argjson newReview "$NEW_REVIEW" '.reviews = [$newReview] + .reviews' reviews.json > reviews_temp.json
            
            # Check if jq succeeded
            if [ $? -eq 0 ]; then
              mv reviews_temp.json reviews.json
              echo "‚úÖ Successfully updated reviews.json"
            else
              echo "‚ùå Failed to update reviews.json, restoring backup"
              mv reviews_backup.json reviews.json
              exit 1
            fi
          else
            echo "‚ùå reviews.json not found"
            exit 1
          fi
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add reviews.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "ü§ñ Auto-update reviews from issue #${{ github.event.issue.number }}" && git push)
          
             - name: Comment on issue
         uses: actions/github-script@v7
         with:
           github-token: ${{ secrets.TOKEN }}
           script: |
             github.rest.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: '‚úÖ Your review has been automatically added to the website! Thank you for your feedback! üéâ'
             })
